import numpy as np

class KNN:
    def __init__(self, k=3):
        """
        Initialize KNN with k nearest neighbors.

        :param k: Number of nearest neighbors to consider.
        """
        self.k = k

    def fit(self, X, y):
        """
        Store training data.

        :param X: Feature matrix (n_samples, n_features).
        :param y: Target vector (n_samples,).
        """
        self.X_train = X
        self.y_train = y

    def predict(self, X):
        """
        Predict target values for new data.

        :param X: Feature matrix (n_samples, n_features).
        :return: Predicted target values (n_samples,).
        """
        predictions = []
        for x in X:
            # Calculate distances between x and training data
            distances = [self.euclidean_distance(x, x_train) for x_train in self.X_train]

            # Get indices of k nearest neighbors
            k_indices = np.argsort(distances)[:self.k]

            # Get labels of k nearest neighbors
            k_labels = self.y_train[k_indices]

            # Predict label with highest frequency
            prediction = np.bincount(k_labels).argmax()
            predictions.append(prediction)

        return np.array(predictions)

    @staticmethod
    def euclidean_distance(x1, x2):
        """
        Calculate Euclidean distance between two vectors.

        :param x1: Vector 1.
        :param x2: Vector 2.
        :return: Euclidean distance.
        """
        return np.sqrt(np.sum((x1 - x2) ** 2))
    
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

# Load iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create scikit-learn KNN classifier
knn_sklearn = KNeighborsClassifier(n_neighbors=3)
knn_sklearn.fit(X_train, y_train)

# Create custom KNN classifier
knn_custom = KNN(k=3)
knn_custom.fit(X_train, y_train)

# Make predictions
y_pred_sklearn = knn_sklearn.predict(X_test)
y_pred_custom = knn_custom.predict(X_test)

# Evaluate accuracy
accuracy_sklearn = np.mean(y_pred_sklearn == y_test)
accuracy_custom = np.mean(y_pred_custom == y_test)

print(f"Scikit-learn KNN Accuracy: {accuracy_sklearn:.3f}")
print(f"Custom KNN Accuracy: {accuracy_custom:.3f}")
